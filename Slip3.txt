Q1. Print the type of file and inode number where file name accepted through Command
Line.
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>
int main(int argc, char *argv[]) {
 if (argc != 2) {
 printf("Usage: %s <filename>\n", argv[0]);
 return 1;
 }
 struct stat fileStat;
 if (stat(argv[1], &fileStat) < 0) {
 fprintf(stderr, "Error accessing file %s: %s\n", argv[1], strerror(errno));
 return 1;
 }
 printf("File: %s\n", argv[1]);
 printf("Inode Number: %ld\n", (long)fileStat.st_ino);
 if (S_ISREG(fileStat.st_mode)) {
 printf("File Type: Regular file\n");
 } else if (S_ISDIR(fileStat.st_mode)) {
 printf("File Type: Directory\n");
 } else if (S_ISLNK(fileStat.st_mode)) {
 printf("File Type: Symbolic Link\n");
 } else if (S_ISCHR(fileStat.st_mode)) {
 printf("File Type: Character Device\n");
 } else if (S_ISBLK(fileStat.st_mode)) {
 printf("File Type: Block Device\n");
 } else if (S_ISFIFO(fileStat.st_mode)) {
 printf("File Type: FIFO/Named Pipe\n");
 } else if (S_ISSOCK(fileStat.st_mode)) {
 printf("File Type: Socket\n");
 } else {
 printf("File Type: Unknown\n");
 }
 return 0;
}







Q2. Write a C program which creates a child process to run linux/ unix command or any user 
defined program. The parent process set the signal handler for death of child signal and 
Alarm signal. If a child process does not complete its execution in 5 second then parent 
process kills child process.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
void child_handler(int signum) {
 if (signum == SIGCHLD) {
 printf("Child process has terminated.\n");
 }
}
void alarm_handler(int signum) {
 if (signum == SIGALRM) {
 printf("Child process exceeded time limit. Killing...\n");
 kill(getpid(), SIGKILL); // Kill the current process
 }
}
int main(int argc, char *argv[]) {
 if (argc < 2) {
 printf("Usage: %s <command>\n", argv[0]);
 return 1;
 }
 signal(SIGCHLD, child_handler);
 signal(SIGALRM, alarm_handler);
 pid_t pid = fork();
 if (pid < 0) {
 perror("Fork failed");
 exit(EXIT_FAILURE);
 } else if (pid == 0) { // Child process
 execvp(argv[1], &argv[1]); // Execute the command
 perror("Execution failed");
 exit(EXIT_FAILURE);
 } else { // Parent process
 alarm(5); // Set alarm for 5 seconds
 // Wait for the child process to terminate
 wait(NULL);
 alarm(0); // Cancel the alarm
 }
 return 0;
}




