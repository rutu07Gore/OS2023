Q.1) Write a C program that illustrates suspending and resuming processes using signals.
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
void sig_handler(int signo) {
 if (signo == SIGUSR1) {
 printf("Received SIGUSR1 - Suspending the process\n");
 raise(SIGSTOP); // Suspend the process
 } else if (signo == SIGUSR2) {
 printf("Received SIGUSR2 - Resuming the process\n");
 }
}
int main() {
 if (signal(SIGUSR1, sig_handler) == SIG_ERR || signal(SIGUSR2, sig_handler) == 
SIG_ERR) {
 perror("Signal setup failed");
 return EXIT_FAILURE;
 }
 printf("Waiting for signals...\n");
 while (1) {
 sleep(1); // Continuously wait for signals
 }
 return 0;
}





Q.2) Write a C program that a string as an argument and return all the files that begins with 
that name in the current directory. For example > ./a.out foo will return all file names that 
begins with foo.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
int main(int argc, char *argv[]) {
 if (argc != 2) {
 printf("Usage: %s <string>\n", argv[0]);
 return 1;
 }
 DIR *dir;
 struct dirent *entry;
 if ((dir = opendir(".")) == NULL) {
 perror("opendir() failed");
 return 1;
 }
 printf("Files starting with '%s':\n", argv[1]);
 while ((entry = readdir(dir)) != NULL) {
 if (strncmp(entry->d_name, argv[1], strlen(argv[1])) == 0) {
 printf("%s\n", entry->d_name);
 }
 }
 closedir(dir);
 return 0;
}