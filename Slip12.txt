Q.1) Write a C program that print the exit status of a terminated child process.
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
int main() {
 pid_t pid = fork();
 if (pid < 0) {
 perror("Fork failed");
 exit(EXIT_FAILURE);
 } else if (pid == 0) { // Child process
 // Perform some task in the child process
 printf("Child process executing...\n");
 exit(42); // Child process exits with status 42
 } else { // Parent process
 int status;
 waitpid(pid, &status, 0); // Wait for the child process to terminate
 if (WIFEXITED(status)) {
 printf("Child process exited normally with status: %d\n", WEXITSTATUS(status));
 } else {
 printf("Child process exited abnormally\n");
 }
 }
 return 0;
}




Q.2) Write a C program which receives file names as command line arguments and display 
those filenames in ascending order according to their sizes. I) (e.g $ a.out a.txt b.txt c.txt, â€¦)
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>
#define MAX_FILES 50
#define MAX_FILENAME_LENGTH 100
// Structure to hold file information
struct FileInfo {
 char filename[MAX_FILENAME_LENGTH];
 off_t size;
};
// Comparator function for qsort
int compare(const void *a, const void *b) {
 return ((struct FileInfo *)a)->size - ((struct FileInfo *)b)->size;
}
int main(int argc, char *argv[]) {
 if (argc < 2) {
 printf("Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
 return 1;
 }
 struct FileInfo files[MAX_FILES];
 int num_files = argc - 1;
 if (num_files > MAX_FILES) {
 printf("Exceeded maximum number of files (%d)\n", MAX_FILES);
 return 1;
 }
 // Get file sizes
 for (int i = 0; i < num_files; ++i) {
 struct stat fileStat;
 if (stat(argv[i + 1], &fileStat) == -1) {
 perror("stat");
 return 1;
 }
 strncpy(files[i].filename, argv[i + 1], MAX_FILENAME_LENGTH - 1);
 files[i].filename[MAX_FILENAME_LENGTH - 1] = '\0';
 files[i].size = fileStat.st_size;
 }
 // Sort files based on size
 qsort(files, num_files, sizeof(struct FileInfo), compare);
 // Display filenames in ascending order of their sizes
 printf("Files sorted by size (ascending order):\n");
 for (int i = 0; i < num_files; ++i) {
 printf("%s - %lld bytes\n", files[i].filename, (long long)files[i].size);
 }
 return 0;
}
