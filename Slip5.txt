Q.1) Read the current directory and display the name of the files, no of files in current 
directory.
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
int main() {
 DIR *directory;
 struct dirent *entry;
 int file_count = 0;
 // Open the current directory
 directory = opendir(".");
 if (directory == NULL) {
 perror("Unable to open directory");
 return EXIT_FAILURE;
 }
 // Read directory entries and display file names
 while ((entry = readdir(directory)) != NULL) {
 printf("%s\n", entry->d_name);
 file_count++;
 }
 closedir(directory);
 printf("\nTotal files in current directory: %d\n", file_count);
 return EXIT_SUCCESS;
}






Q.2) Write a C program to create an unnamed pipe. The child process will write following 
three messages to pipe and parent process display it. 
Message1 = “Hello World” 
Message2 = “Hello SPPU” 
Message3 = “Linux is Funny”
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#define MSG_SIZE 100
int main() {
 int pipefd[2];
 pid_t pid;
 char message[3][MSG_SIZE] = {
 "Hello World",
 "Hello SPPU",
 "Linux is Funny"
 };
 if (pipe(pipefd) == -1) {
 perror("Pipe creation failed");
 exit(EXIT_FAILURE);
 }
 pid = fork();
 if (pid < 0) {
 perror("Fork failed");
 exit(EXIT_FAILURE);
 } else if (pid == 0) { // Child process
 close(pipefd[0]); // Close reading end of pipe in child
 for (int i = 0; i < 3; i++) {
 write(pipefd[1], message[i], strlen(message[i]) + 1);
 }
 close(pipefd[1]); // Close writing end of pipe in child
 } else { // Parent process
 close(pipefd[1]); // Close writing end of pipe in parent
 char buffer[MSG_SIZE];
 while (read(pipefd[0], buffer, MSG_SIZE) > 0) {
 printf("Message received: %s\n", buffer);
 }
 close(pipefd[0]); // Close reading end of pipe in parent
 }
 return 0;
}
